import .x11
import std::fs

struct Screenshot {
    image: &x11::Image
}

def new_screenshot(
    display: &x11::Display,
    window: x11::Window,
): Screenshot {
    let result: Screenshot
    let attributes = window.get_attributes(display)
    result.image = display.get_image(
        window, 0, 0,
        attributes.width,
        attributes.height,
        0xffffffff,
        x11::Format::ZPixmap
    )
    return result
}

// void saveToPPM(XImage *image, const char *filePath) {
//     FILE *f = fopen(filePath, "wb");
//     if (f == NULL) {
//         fprintf(stderr, "Failed to open file for writing\n");
//         return;
//     }

//     fprintf(f, "P6\n%d %d\n255\n", image->width, image->height);

//     for (int i = 0; i < image->width * image->height; i++) {
//         fputc(image->data[i * 4 + 2], f);
//         fputc(image->data[i * 4 + 1], f);
//         fputc(image->data[i * 4 + 0], f);
//     }

//     fclose(f);
// }

[extern] def fprintf(f: &fs::File, format: str, ...)
[extern] def fputc(c: u8, f: &fs::File)

def save_to_ppm(
    image: &x11::Image,
    file_path: str,
) {
    let f = fs::File::open(file_path, "wb")
    if f == null {
        println("Failed to open file for writing\n")
        return
    }

    fprintf(f, "P6\n%d %d\n255\n", image.width, image.height)

    for let i = 0i32; i < image.width * image.height; i++ {
        fputc(image.data[i * 4 + 2], f)
        fputc(image.data[i * 4 + 1], f)
        fputc(image.data[i * 4 + 0], f)
    }
    f.close()
}